-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local SoundService = game:GetService("SoundService")
local GuiService = game:GetService("GuiService")

-- Player references
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Sound effects
local clickSound = Instance.new("Sound")
clickSound.SoundId = "rbxassetid://177266782" -- Typewriter click
clickSound.Volume = 0.3
clickSound.Parent = SoundService

local errorSound = Instance.new("Sound")
errorSound.SoundId = "rbxassetid://138081500" -- Error beep
errorSound.Volume = 0.4
errorSound.Parent = SoundService

local successSound = Instance.new("Sound")
successSound.SoundId = "rbxassetid://6026984224" -- Success beep
successSound.Volume = 0.4
successSound.Parent = SoundService

-- Command System
local Commands = {}
local CommandOrder = {} -- This will track the order commands were added

-- Type 1: Simple command with description and function
function AddCommand(name, description, func)
    Commands[name:lower()] = {
        desc = description,
        exec = func,
        hasValue = false,
        hasPlayer = false
    }
    table.insert(CommandOrder, name:lower())
end

-- Type 2: Command with value input
function AddCommandWithValue(name, valueName, description, func)
    Commands[name:lower()] = {
        desc = description,
        exec = func,
        hasValue = true,
        valueName = valueName,
        hasPlayer = false
    }
    table.insert(CommandOrder, name:lower())
end

-- Type 3: Command with player input
function AddCommandWithPlayer(name, description, func)
    Commands[name:lower()] = {
        desc = description,
        exec = func,
        hasValue = false,
        hasPlayer = true
    }
    table.insert(CommandOrder, name:lower())
end

-- Type 4: Command with both value and player inputs
function AddCommandWithValueAndPlayer(name, valueName, description, func)
    Commands[name:lower()] = {
        desc = description,
        exec = func,
        hasValue = true,
        valueName = valueName,
        hasPlayer = true
    }
    table.insert(CommandOrder, name:lower())
end

-- Alternative simplified command system
function AddCmd(name, description, ...)
    local inputs = {...}
    local hasValue = false
    local valueName = nil
    local hasPlayer = false
    
    for _, input in ipairs(inputs) do
        if input == "value" then
            hasValue = true
            valueName = "value"
        elseif input == "player" then
            hasPlayer = true
        end
    end
    
    return function(func)
        Commands[name:lower()] = {
            desc = description,
            exec = func,
            hasValue = hasValue,
            valueName = valueName,
            hasPlayer = hasPlayer
        }
        table.insert(CommandOrder, name:lower())
    end
end

AddCommand("help", "Shows all commands", function() return "Opening help window..." end)

local function Con()
    game:GetService("StarterGui"):SetCore("DevConsoleVisible",true)
    return "Opening Console."
end

-- Example commands using the new system
local function sk()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/hm5650/InstantKillig/refs/heads/main/Coolkillguithingy", true))()
    return "Opening 'SKILL' Window."
end

local function enableFlight()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/OBFhm5650lol/F/refs/heads/main/F", true))()
    return "Opening 'Fly' Window."
end

local function plrz()
     loadstring(game:HttpGet("https://raw.githubusercontent.com/igfrxx/PlayerSeletcte/refs/heads/main/r", true))()
     return "Opening 'Players' Window"
end

AddCommandWithValue("walkspeed", "speed", "Sets your speed", function(speed)
    speed = tonumber(speed)
    if not speed then
        return "Invalid speed value."
    end

    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChildOfClass("Humanoid") then
        character:FindFirstChildOfClass("Humanoid").WalkSpeed = speed
        return "WalkSpeed set to " .. speed
    else
        return "Character or Humanoid not found."
    end
end)

AddCommandWithValue("ws", "speed", "Sets your speed", function(speed)
    speed = tonumber(speed)
    if not speed then
        return "Invalid speed value."
    end

    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChildOfClass("Humanoid") then
        character:FindFirstChildOfClass("Humanoid").WalkSpeed = speed
        return "WalkSpeed set to " .. speed
    else
        return "Character or Humanoid not found."
    end
end)

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function setTransparency(character, transparency)
	for _, part in pairs(character:GetDescendants()) do
		if part:IsA("BasePart") or part:IsA("Decal") then
			part.Transparency = transparency
		end
	end
end

function invis2()
	local savedpos = character:WaitForChild("HumanoidRootPart").CFrame
	task.wait()
	character:MoveTo(Vector3.new(-25.95, 84, 3537.55))
	task.wait(0.15)

	local seat = Instance.new("Seat")
	seat.Name = "invischair"
	seat.Anchored = false
	seat.CanCollide = false
	seat.Transparency = 1
	seat.Position = Vector3.new(-25.95, 84, 3537.55)
	seat.Parent = workspace

	local weld = Instance.new("Weld", seat)
	weld.Part0 = seat
	weld.Part1 = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")

	task.wait()
	seat.CFrame = savedpos
	setTransparency(character, 0.5)
   return "Invisibility: TRUE"
end

function vis2()
	local invisChair = workspace:FindFirstChild("invischair")
	if invisChair then
		invisChair:Destroy()
	end

	setTransparency(character, 0)
   return "Invisibility: FALSE"
end


local TeleportTime = 0.2
local AutoStopTime = 5 -- seconds to run before auto-stopping

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local localPlayer = Players.LocalPlayer

local function resetCameraSubject()
    if workspace.CurrentCamera and localPlayer.Character then
        local humanoid = localPlayer.Character:FindFirstChildWhichIsA("Humanoid")
        if humanoid then
            workspace.CurrentCamera.CameraSubject = humanoid
        end
    end
end

local function StartAB()
    local plr = Players.LocalPlayer
    local character = plr.Character or plr.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    
    local lastPos = hrp.Position
    local targetPos = Vector3.new(0, -80000000, 0)
    local db = false
    local velConn
    
    -- Clean up any existing Gaze parts
    for _, gaze in ipairs(workspace:GetDescendants()) do
        if gaze:IsA("Part") and gaze.Name == "Gaze" and gaze.Transparency == 0.5 then
            workspace.Gaze:Destroy()
        end
    end

    local function createTween(targetCFrame)
        local tweenInfo = TweenInfo.new(TeleportTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        return TweenService:Create(hrp, tweenInfo, {CFrame = targetCFrame})
    end

    local function startVelLoop()
        velConn = RunService.Heartbeat:Connect(function()
            hrp.Velocity = Vector3.new(0, 0, 0)
        end)
    end

    local function stopScript()
        if db then return end
        db = true
        
        -- Stop velocity loop
        if velConn then
            velConn:Disconnect()
            velConn = nil
        end
        
        -- Tween back to original position
        local tweenBack = createTween(CFrame.new(lastPos))
        tweenBack:Play()
        tweenBack.Completed:Wait()
        
        -- Reset camera and clean up
        workspace.FallenPartsDestroyHeight = -500
        resetCameraSubject()
        
        for _, gaze in ipairs(workspace:GetDescendants()) do
            if gaze:IsA("Part") and gaze.Name == "Gaze" and gaze.Transparency == 0.5 then
                workspace.Gaze:Destroy()
            end
        end
        
        db = false
    end

    if db then return end
    db = true
    
    -- Store original position
    lastPos = hrp.Position
    
    -- First teleport 20 studs underground
    local undergroundPos = Vector3.new(lastPos.X, lastPos.Y - 20, lastPos.Z)
    local undergroundTween = createTween(CFrame.new(undergroundPos))
    undergroundTween:Play()
    undergroundTween.Completed:Wait()
    
    -- Create Gaze part and set camera
    local part = Instance.new("Part")
    part.Size = Vector3.new(4, 5, 4)
    part.Position = lastPos
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 0.5
    part.Name = "Gaze"
    part.Parent = game.Workspace
    workspace.CurrentCamera.CameraSubject = part
    
    workspace.FallenPartsDestroyHeight = 0/0
    
    -- Tween to target position
    local tweenToTarget = createTween(CFrame.new(targetPos))
    tweenToTarget:Play()
    tweenToTarget.Completed:Wait()
    
    -- Start velocity loop
    startVelLoop()
    
    -- Schedule automatic stop after AutoStopTime seconds
    delay(AutoStopTime, stopScript)
    
    db = false
    return "AntiBang Executed.."
end

local LocalPlayer = Players.LocalPlayer
local TFlingActive = false
local ModeActive = false
local TFlingCoroutine
local ModeConnection

-- TFling functionality
local function TFling()
    local character = LocalPlayer.Character
    if not character then return end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    while TFlingActive do
        RunService.Heartbeat:Wait()
        local velocity = rootPart.Velocity
        rootPart.Velocity = velocity * 999999999999999999999999999999999 + Vector3.new(0, 999999999999999999999999999999999, 0)
        RunService.RenderStepped:Wait()
        rootPart.Velocity = velocity
        RunService.Stepped:Wait()
        rootPart.Velocity = velocity + Vector3.new(0, 0.1, 0)
    end
end

-- Mode functionality
local function DisableCollisions()
    if not LocalPlayer.Character then return end
    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
        if part:IsA("BasePart") and not part.Anchored then
            part.CanCollide = false
        end
    end
end

local function EnableCollisions()
    if LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

-- Control functions
function TFlingOn()
    TFlingActive = true
    TFlingCoroutine = coroutine.create(TFling)
    coroutine.resume(TFlingCoroutine)
    return "Walkfling: TRUE"
end

function TFlingOff()
    TFlingActive = false
    if TFlingCoroutine then
        coroutine.close(TFlingCoroutine)
    end
    return "Walkfling: FALSE"
end

function ModeOn()
    ModeActive = true
    ModeConnection = RunService.Heartbeat:Connect(DisableCollisions)
    return "Noclip Enabled.."
end

function ModeOff()
    ModeActive = false
    if ModeConnection then
        ModeConnection:Disconnect()
    end
    EnableCollisions()
    return "Noclip Disabled.."
end

local VirtualUser = game:GetService('VirtualUser')
local antiAFKConnection = nil

function antiafkon()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    antiAFKConnection = game:GetService('Players').LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    return "Anti-AFK enabled"
end

function antiafkoff()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
        antiAFKConnection = nil
        return "Anti-AFK disabled"
    else
        return "Anti-AFK wasn't enabled"
    end
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local speaker = Players.LocalPlayer

local antiflingConnection = nil

function Afon()
    if antiflingConnection then
        antiflingConnection:Disconnect()
    end

    antiflingConnection = RunService.Stepped:Connect(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= speaker and player.Character then
                for _, v in pairs(player.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end
        end
    end)
    return "Anti-Fling enabled" 
end

function Afoff()
    if antiflingConnection then
        antiflingConnection:Disconnect()
        antiflingConnection = nil
    end
    return "Anti-Fling disabled" 
end

local player = game.Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Physics Settings
local GRAVITY_MULTIPLIER = 1.5 -- Visible but not too fast
local INITIAL_BOOST = 10 -- Gentle push to start
local MAX_SPEED = 20 -- Maximum upward speed
local SIMULATION_RADIUS = 5000 -- Large area of effect

-- System Variables
local invertedParts = {}
local connection = nil
local heartbeatConnection = nil

local function cleanUpForces(part)
    for _, child in ipairs(part:GetChildren()) do
        if child:IsA("BodyForce") or child:IsA("BodyVelocity") then
            child:Destroy()
        end
    end
end

local function applyUpwardForce()
    -- Ensure we can affect distant parts
    sethiddenproperty(player, "SimulationRadius", SIMULATION_RADIUS)
    sethiddenproperty(player, "MaxSimulationRadius", SIMULATION_RADIUS)
    
    for part, data in pairs(invertedParts) do
        if part and part.Parent then
            -- Calculate upward force based on part's mass
            local force = part:GetMass() * Workspace.Gravity * GRAVITY_MULTIPLIER
            
            -- Apply force while respecting max speed
            if part.Velocity.Y < MAX_SPEED then
                part:ApplyImpulse(Vector3.new(0, force * 0.016, 0)) -- 0.016 ≈ 1/60 for frame independence
            end
            
            -- Ensure parts don't get stuck
            if part.Velocity.Y < 5 then
                part.Velocity = Vector3.new(0, 5, 0)
            end
        else
            invertedParts[part] = nil
        end
    end
end

local function invertGravity(part)
    if part:IsA("BasePart") and not part.Anchored and not part:IsDescendantOf(player.Character) then
        if not invertedParts[part] then
            -- Store original state
            invertedParts[part] = {
                CanCollide = part.CanCollide,
                CustomPhysicalProperties = part.CustomPhysicalProperties
            }
            
            -- Clean existing forces
            cleanUpForces(part)
            
            -- Configure part physics
            part.CanCollide = false
            part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            
            -- Initial gentle push
            part.Velocity = Vector3.new(0, INITIAL_BOOST, 0)
            
            -- Add permanent upward force
            local bodyForce = Instance.new("BodyForce")
            bodyForce.Force = Vector3.new(0, part:GetMass() * Workspace.Gravity * GRAVITY_MULTIPLIER, 0)
            bodyForce.Parent = part
            invertedParts[part].bodyForce = bodyForce
        end
    end
end

local function restoreGravity(part)
    if invertedParts[part] then
        cleanUpForces(part)
        part.CanCollide = invertedParts[part].CanCollide
        part.CustomPhysicalProperties = invertedParts[part].CustomPhysicalProperties
        part.Velocity = Vector3.new(0, 0, 0)
        invertedParts[part] = nil
    end
end

function GravOn()
    -- Set physics range
    sethiddenproperty(player, "SimulationRadius", SIMULATION_RADIUS)
    
    -- Process existing parts
    for _, part in ipairs(Workspace:GetDescendants()) do
        invertGravity(part)
    end
    
    -- Continuous force application
    if heartbeatConnection then heartbeatConnection:Disconnect() end
    heartbeatConnection = RunService.Heartbeat:Connect(applyUpwardForce)
    
    -- Detect new parts
    if connection then connection:Disconnect() end
    connection = Workspace.DescendantAdded:Connect(invertGravity)
    return "Gravity Invert enabled"
end

function GravOff()
    -- Clean up
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end
    
    for part in pairs(invertedParts) do
        if part.Parent then
            restoreGravity(part)
        end
    end
    
    invertedParts = {}
    if connection then
        connection:Disconnect()
        connection = nil
    end
    return "Gravity Invert disabled"
end


-- Black Hole Script Function
local function blackHoleScript()
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local LocalPlayer = Players.LocalPlayer
    local Workspace = game:GetService("Workspace")

    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    Folder = Instance.new("Folder", Workspace)
    local Part = Instance.new("Part", Folder)
    Attachment1 = Instance.new("Attachment", Part)
    Part.Anchored = true
    Part.CanCollide = false
    Part.Transparency = 1

    if not Network then
        Network = {
            BaseParts = {},
            Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
        }

        Network.RetainPart = function(Part)
            if typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(Workspace) then
                table.insert(Network.BaseParts, Part)
                Part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                Part.CanCollide = false
            end
        end

        local function EnablePartControl()
            LocalPlayer.ReplicationFocus = Workspace
            RunService.Heartbeat:Connect(function()
                sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                for _, Part in pairs(Network.BaseParts) do
                    if Part:IsDescendantOf(Workspace) then
                        Part.Velocity = Network.Velocity
                    end
                end
            end)
        end

        EnablePartControl()
    end

    local function ForcePart(v)
        if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
            for _, x in next, v:GetChildren() do
                if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                    x:Destroy()
                end
            end
            if v:FindFirstChild("Attachment") then
                v:FindFirstChild("Attachment"):Destroy()
            end
            if v:FindFirstChild("AlignPosition") then
                v:FindFirstChild("AlignPosition"):Destroy()
            end
            if v:FindFirstChild("Torque") then
                v:FindFirstChild("Torque"):Destroy()
            end
            v.CanCollide = false
            local Torque = Instance.new("Torque", v)
            Torque.Torque = Vector3.new(100000, 100000, 100000)
            local AlignPosition = Instance.new("AlignPosition", v)
            local Attachment2 = Instance.new("Attachment", v)
            Torque.Attachment0 = Attachment2
            AlignPosition.MaxForce = 9999999999999999
            AlignPosition.MaxVelocity = math.huge
            AlignPosition.Responsiveness = 200
            AlignPosition.Attachment0 = Attachment2
            AlignPosition.Attachment1 = Attachment1
        end
    end

    blackHoleActive = true

    for _, v in next, Workspace:GetDescendants() do
        ForcePart(v)
    end

    Workspace.DescendantAdded:Connect(function(v)
        if blackHoleActive then
            ForcePart(v)
        end
    end)

    spawn(function()
        while blackHoleActive and RunService.RenderStepped:Wait() do
            Attachment1.WorldCFrame = humanoidRootPart.CFrame
        end
    end)
    return "BlackHole: TRUE"
end

-- Function to disable black hole
local function disableBlackHole()
    blackHoleActive = false
    if Folder then
        Folder:Destroy()
        Folder = nil
    end
    if Network then
        Network.BaseParts = {}
    end
    return "BlackHole: FALSE"
end


-- Using AddCommand (original system)
AddCommand("fly", "Opens FLYGUI", function() return enableFlight() end)
AddCommand("noclip", "Walk thru walls", ModeOn)
AddCommand("clip", "Stops Noclip", ModeOff)
AddCommand("swordkill", "Opens SKILL", sk)
AddCommand("skill", "Opens SKILL", sk)
AddCommand("walkfling", "Starts Touchfling", TFlingOn)
AddCommand("wf", "Starts Touchfling", TFlingOn)
AddCommand("unwalkfling", "Stops Touchfling", TFlingOff)
AddCommand("unwf", "Stops Touchfling", TFlingOff)
AddCommand("Invisible", "Hides you", invis2)
AddCommand("visible", "Shows you", vis2)
AddCommand("Invis", "Hides you", invis2)
AddCommand("vis", "Shows you", vis2)
AddCommand("antibang", "use when banged", StartAB)
AddCommand("ab", "use when banged", StartAB)
AddCommand("antifling", "Prevents exploiter flings", Afon)
AddCommand("af", "Prevents exploiter flings", Afon)
AddCommand("unantifling", "Vulnerable to exploiter flings", Afoff)
AddCommand("unaf", "Vulnerable to exploiter flings", Afoff)
AddCommand("antiafk", "Prevents idle kick", antiafkon)
AddCommand("aafk", "Prevents idle kick", antiafkon)
AddCommand("unantiafk", "Stops Anti-Afk", antiafkoff)
AddCommand("unaafk", "Stops Anti-Afk", antiafkoff)
AddCommand("invertgrav", "Inverts UnachoredParts Gravity", GravOn)
AddCommand("igrav", "Inverts UnachoredParts Gravity", GravOn)
AddCommand("uninvertgrav", "Stopps Inverting UnachoredParts Gravity", GravOff)
AddCommand("unigrav", "Stopps Inverting UnachoredParts Gravity", GravOff)
AddCommand("blackhole", "Sucks UnachoredParts", blackHoleScript)
AddCommand("unblackhole", "stops sucking UnachoredParts", disableBlackHole)
AddCommand("blackhole", "Sucks UnachoredParts", Con)
AddCommand("unblackhole", "stops sucking UnachoredParts", Con)
AddCommand("players", "Opens the players gui", plrz)
AddCommand("console", "Opens Console", Con)
AddCommand("cn", "Opens Console", Con)

-- New commands added below --

-- Set max camera zoom only (does NOT change min zoom)
AddCommandWithValue("zoom", "value", "Sets max camera zoom distance", function(value)
    local num = tonumber(value)
    if not num or num < 0 then
        return "Invalid zoom value"
    end

    local player = game.Players.LocalPlayer
    player.CameraMaxZoomDistance = num

    return "Max zoom set to " .. num
end)

-- Reset zoom to Roblox defaults (min stays at default 0.5, max at 128)
AddCommand("resetzoom", "Reset zoom distance to default", function()
    local player = game.Players.LocalPlayer
    player.CameraMaxZoomDistance = 128

    return "Zoom reset to default"
end)

-- Set camera field of view
AddCommandWithValue("fov", "value", "Sets camera Field of View", function(value)
    local num = tonumber(value)
    if not num or num < 1 or num > 120 then
        return "FOV must be between 1 and 120"
    end

    workspace.CurrentCamera.FieldOfView = num
    return "FOV set to " .. num
end)

-- Helper: Find a player by partial username or display name
local function FindPlayer(name)
    name = name:lower()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name:lower():sub(1, #name) == name or player.DisplayName:lower():sub(1, #name) == name then
            return player
        end
    end
    return nil
end

-- View command
AddCommandWithPlayer("view", "View a player", function(name)
    local targetPlayer = FindPlayer(name)
    if not targetPlayer then
        return "Player not found"
    end

    local targetCharacter = targetPlayer.Character
    if not targetCharacter then
        return "Target player has no character"
    end

    local humanoid = targetCharacter:FindFirstChildWhichIsA("Humanoid")
    local hrp = targetCharacter:FindFirstChild("HumanoidRootPart")

    if humanoid then
        workspace.CurrentCamera.CameraSubject = humanoid
    elseif hrp then
        workspace.CurrentCamera.CameraSubject = hrp
    else
        return "Target has no viewable body part"
    end

    return "Now viewing " .. targetPlayer.Name
end)

-- Unview command (returns camera to self)
AddCommand("unview", "Reset camera back to yourself", function()
    local character = game.Players.LocalPlayer.Character
    if not character then
        return "Your character not found"
    end

    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
    local hrp = character:FindFirstChild("HumanoidRootPart")

    if humanoid then
        workspace.CurrentCamera.CameraSubject = humanoid
    elseif hrp then
        workspace.CurrentCamera.CameraSubject = hrp
    else
        return "You have no viewable body part"
    end

    return "Stopped Viewing"
end)

-- Fixed version of the goto command
AddCommandWithPlayer("goto", "Teleport to a player", function(name)
    local targetPlayer = FindPlayer(name)
    if not targetPlayer then return "Target player not found" end

    local character = game.Players.LocalPlayer.Character
    if not character then return "Your character not found" end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return "Your HumanoidRootPart not found" end

    local targetCharacter = targetPlayer.Character
    if not targetCharacter then return "Target character not found" end

    local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
    if not targetHRP then return "Target HumanoidRootPart not found" end

    -- Offset behind the target
    local offset = CFrame.new(0, 0, 5)
    humanoidRootPart.CFrame = targetHRP.CFrame * offset

    return "Teleported to " .. targetPlayer.Name
end)

-- Activate all tools command
AddCommand("aat", "Activates all tools in your inventory", function()
    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    
    if not backpack and not character then return "No tools found" end
    
    local tools = {}
    
    -- Get tools from backpack
    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item)
            end
        end
    end
    
    -- Get tools from character
    if character then
        for _, item in ipairs(character:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item)
            end
        end
    end
    
    if #tools == 0 then return "No tools found" end
    
    -- Equip and activate all tools
    for _, tool in ipairs(tools) do
        if character then
            tool.Parent = character
            if tool:FindFirstChild("Activate") then
                tool.Activate:Fire()
            end
        end
    end
    
    return "Activated "..#tools.." tools"
end)

AddCommand("activatealltools", "Activates all tools in your inventory", function()
    return Commands["aat"].exec()
end)

-- Add this to your existing script

local loopUnequipActive = false
local loopUnequipConnection
local lastTool = nil
local toolEquippedConn = nil

local function getRandomTool()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local backpack = player:FindFirstChild("Backpack")
    
    local tools = {}
    
    -- Get tools from character
    if character then
        for _, item in ipairs(character:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item)
            end
        end
    end
    
    -- Get tools from backpack
    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(tools, item)
            end
        end
    end
    
    if #tools > 0 then
        -- Don't select the same tool twice in a row
        local tool
        repeat
            tool = tools[math.random(1, #tools)]
        until #tools == 1 or tool ~= lastTool
        lastTool = tool
        return tool
    end
    return nil
end

local function activateTool(tool)
    if tool and tool:FindFirstChild("Activate") then
        -- Double activation for reliability
        tool.Activate:Fire()
        task.defer(function()
            tool.Activate:Fire()
        end)
    end
end

local function setupToolEquippedListener()
    if toolEquippedConn then
        toolEquippedConn:Disconnect()
    end
    
    toolEquippedConn = game.Players.LocalPlayer.Character.ChildAdded:Connect(function(child)
        if loopUnequipActive and child:IsA("Tool") then
            activateTool(child)
        end
    end)
end

local function loopUnequipFunction()
    -- Set up listener for when tools get equipped
    if game.Players.LocalPlayer.Character then
        setupToolEquippedListener()
    end
    
    game.Players.LocalPlayer.CharacterAdded:Connect(function()
        if loopUnequipActive then
            setupToolEquippedListener()
        end
    end)
    
    while loopUnequipActive and task.wait(0.01) do
        local tool = getRandomTool()
        if tool then
            -- Unequip if currently equipped
            if tool.Parent == game.Players.LocalPlayer.Character then
                tool.Parent = game.Players.LocalPlayer.Backpack
                task.wait() -- Yield for one frame
            end
            
            -- Equip (activation will happen automatically via the listener)
            tool.Parent = game.Players.LocalPlayer.Character
            
            -- Extra activation for immediate response
            activateTool(tool)
        end
    end
end

AddCommand("loopaat", "Looped ActivateAllTools", function()
    if loopUnequipActive then return "Already looping tool unequip" end
    loopUnequipActive = true
    loopUnequipConnection = task.spawn(loopUnequipFunction)
    return "Started LoopAAT"
end)

AddCommand("unloopaat", "Stops LoopAAT", function()
    if not loopUnequipActive then return "Not currently looping tool unequip" end
    loopUnequipActive = false
    if toolEquippedConn then
        toolEquippedConn:Disconnect()
        toolEquippedConn = nil
    end
    if loopUnequipConnection then
        task.cancel(loopUnequipConnection)
    end
    return "Stopped LoopAAT"
end)

-- ESP command
local espEnabled = false
local espObjects = {}

local function createESP(player)
    local character = player.Character
    if not character then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = character
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    
    -- Set color based on team
    if player.Team then
        if player.Team == game.Players.LocalPlayer.Team then
            highlight.FillColor = Color3.fromRGB(0, 0, 255) -- Blue for teammates
            highlight.OutlineColor = Color3.fromRGB(0, 0, 200)
        else
            highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for enemies
            highlight.OutlineColor = Color3.fromRGB(200, 0, 0)
        end
    else
        highlight.FillColor = Color3.fromRGB(0, 255, 0) -- Green for neutral
        highlight.OutlineColor = Color3.fromRGB(0, 200, 0)
    end
    
    highlight.Parent = character
    
    -- Distance label
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Distance"
    billboard.Adornee = character:WaitForChild("Head") or character:WaitForChild("HumanoidRootPart")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    
    local label = Instance.new("TextLabel")
    label.Name = "ESP_Label"
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = player.Name
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Parent = billboard
    
    billboard.Parent = character
    
    -- Store for cleanup
    espObjects[player] = {highlight, billboard}
    
    -- Update distance
    game:GetService("RunService").Heartbeat:Connect(function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
        if not game.Players.LocalPlayer.Character or not game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
        
        local distance = (character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        label.Text = string.format("%s [%d studs]", player.Name, math.floor(distance))
    end)
end

local function removeESP(player)
    if espObjects[player] then
        for _, obj in ipairs(espObjects[player]) do
            if obj then
                obj:Destroy()
            end
        end
        espObjects[player] = nil
    end
end

AddCommand("esp", "Highlights all players with distance", function()
    if espEnabled then return "ESP is already enabled" end
    
    espEnabled = true
    
    -- ESP existing players
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            createESP(player)
        end
    end
    
    -- ESP new players
    game.Players.PlayerAdded:Connect(function(player)
        if espEnabled then
            player.CharacterAdded:Connect(function(character)
                if espEnabled then
                    createESP(player)
                end
            end)
        end
    end)
    
    -- Handle character respawns
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            player.CharacterAdded:Connect(function(character)
                if espEnabled then
                    createESP(player)
                end
            end)
        end
    end
    
    return "ESP enabled"
end)

AddCommand("unesp", "Removes all ESP highlights", function()
    if not espEnabled then return "ESP is not enabled" end
    
    espEnabled = false
    
    for player, objects in pairs(espObjects) do
        for _, obj in ipairs(objects) do
            if obj then
                obj:Destroy()
            end
        end
    end
    
    espObjects = {}
    return "ESP disabled"
end)

-- Xray command
local xrayEnabled = false
local originalTransparencies = {}

local function enableXray()
    if xrayEnabled then return end
    
    xrayEnabled = true
    
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Transparency < 1 then
            originalTransparencies[part] = part.Transparency
            part.Transparency = 0.5
            part.LocalTransparencyModifier = 0.5
        end
    end
    
    -- Handle new parts
    workspace.DescendantAdded:Connect(function(part)
        if xrayEnabled and part:IsA("BasePart") and part.Transparency < 1 then
            originalTransparencies[part] = part.Transparency
            part.Transparency = 0.5
            part.LocalTransparencyModifier = 0.5
        end
    end)
end

local function disableXray()
    if not xrayEnabled then return end
    
    xrayEnabled = false
    
    for part, transparency in pairs(originalTransparencies) do
        if part:IsA("BasePart") then
            part.Transparency = transparency
            part.LocalTransparencyModifier = 0
        end
    end
    
    originalTransparencies = {}
end

AddCommand("xray", "See through walls", function()
    enableXray()
    return "Xray enabled"
end)

AddCommand("unxray", "Disables xray", function()
    disableXray()
    return "Xray disabled"
end)

-- Tool/object ESP command
local toolEspEnabled = false
local toolEspObjects = {}

local function createToolESP(tool)
    if not tool:IsA("BasePart") and not tool:IsA("Model") then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "ToolESP_Highlight"
    highlight.Adornee = tool
    highlight.FillColor = Color3.fromRGB(255, 165, 0) -- Orange
    highlight.OutlineColor = Color3.fromRGB(200, 130, 0)
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = tool
    
    -- Label
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ToolESP_Label"
    billboard.Adornee = tool:IsA("BasePart") and tool or tool:FindFirstChildWhichIsA("BasePart")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    
    local label = Instance.new("TextLabel")
    label.Name = "ToolESP_Text"
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = tool.Name
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Parent = billboard
    
    billboard.Parent = tool
    
    -- Store for cleanup
    toolEspObjects[tool] = {highlight, billboard}
end

local function removeToolESP(tool)
    if toolEspObjects[tool] then
        for _, obj in ipairs(toolEspObjects[tool]) do
            if obj then
                obj:Destroy()
            end
        end
        toolEspObjects[tool] = nil
    end
end

local function scanForTools()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Tool") or (obj:IsA("BasePart") and obj.Parent ~= workspace) then
            createToolESP(obj)
        end
    end
end

AddCommand("partesp", "Esps everything [LAG]", function()
    if toolEspEnabled then return "Part ESP is already enabled" end
    
    toolEspEnabled = true
    
    -- Scan existing tools
    scanForTools()
    
    -- Watch for new tools
    workspace.DescendantAdded:Connect(function(obj)
        if toolEspEnabled and (obj:IsA("Tool") or (obj:IsA("BasePart") and obj.Parent ~= workspace)) then
            createToolESP(obj)
        end
    end)
    
    return "Part ESP enabled"
end)


AddCommand("unpartesp", "Removes all part ESP [WIP]", function()
    if not toolEspEnabled then return "Part ESP is not enabled" end
    
    toolEspEnabled = false
    
    for tool, objects in pairs(toolEspObjects) do
        for _, obj in ipairs(objects) do
            if obj then
                obj:Destroy()
            end
        end
    end
    
    toolEspObjects = {}
    return "Part ESP disabled"
end)


-- Create the main GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AdminPanel"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Function to detect if the player is on mobile
local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled and not UserInputService.MouseEnabled
end

-- Function to initialize the GUI
local function initializeGUI()
    -- Clear any existing GUI elements
    for _, child in ipairs(ScreenGui:GetChildren()) do
        child:Destroy()
    end

    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.BorderSizePixel = 0
    MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    MainFrame.BackgroundTransparency = 0.2
    
    -- Set position based on device type
    if isMobile() then
        MainFrame.Position = UDim2.new(0, 20, 0, 2)
    else
        MainFrame.Position = UDim2.new(0.5, -73, 1, -50)
    end
    
    MainFrame.Size = UDim2.new(0, 146, 0, 44)
    MainFrame.Parent = ScreenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 21)
    UICorner.Parent = MainFrame

    local Arrow = Instance.new("TextLabel")
    Arrow.Name = "Arrow"
    Arrow.Text = ">"
    Arrow.Font = Enum.Font.Arcade
    Arrow.TextSize = 40
    Arrow.TextColor3 = Color3.fromRGB(0, 255, 0)
    Arrow.BackgroundTransparency = 1
    Arrow.Size = UDim2.new(0, 56, 0, 50)
    Arrow.Position = UDim2.new(0, 0, 0, -6)
    Arrow.Parent = MainFrame

    -- Blinking arrow animation
    local arrowBlink = TweenService:Create(Arrow, TweenInfo.new(0.8, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        TextTransparency = 0.5
    })
    arrowBlink:Play()

    local InputBox = Instance.new("TextBox")
    InputBox.Name = "InputBox"
    InputBox.PlaceholderText = "..."
    InputBox.Font = Enum.Font.Arcade
    InputBox.TextSize = 25
    InputBox.TextColor3 = Color3.fromRGB(0, 255, 0)
    InputBox.PlaceholderColor3 = Color3.fromRGB(0, 255, 0)
    InputBox.BackgroundTransparency = 1
    InputBox.TextXAlignment = Enum.TextXAlignment.Left
    InputBox.Size = UDim2.new(0, 102, 0, 44)
    InputBox.Position = UDim2.new(0, 40, 0, 0)
    InputBox.Parent = MainFrame

    -- Input box focus animations
    InputBox.Focused:Connect(function()
        clickSound:Play()
        local focusTween = TweenService:Create(InputBox, TweenInfo.new(0.2), {
            TextColor3 = Color3.fromRGB(0, 255, 255),
            PlaceholderColor3 = Color3.fromRGB(0, 255, 255)
        })
        focusTween:Play()
    end)

    InputBox.FocusLost:Connect(function()
        local unfocusTween = TweenService:Create(InputBox, TweenInfo.new(0.2), {
            TextColor3 = Color3.fromRGB(0, 255, 0),
            PlaceholderColor3 = Color3.fromRGB(0, 255, 0)
        })
        unfocusTween:Play()
    end)

    local VersionLabel = Instance.new("TextLabel")
    VersionLabel.Name = "VersionLabel"
    VersionLabel.Text = "V0.1"
    VersionLabel.TextSize = 10
    VersionLabel.TextTransparency = 0.6
    VersionLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
    VersionLabel.BackgroundTransparency = 1
    VersionLabel.Size = UDim2.new(0, 26, 0, 18)
    VersionLabel.Position = UDim2.new(0, 8, 0, 44)
    VersionLabel.Parent = MainFrame

    -- Version label animation
    local versionPulse = TweenService:Create(VersionLabel, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
        TextTransparency = 0.3
    })
    versionPulse:Play()

    -- Initial boot animation
    MainFrame.Size = UDim2.new(0, 0, 0, 44)
    MainFrame.BackgroundTransparency = 1
    Arrow.TextTransparency = 1
    InputBox.TextTransparency = 1
    VersionLabel.TextTransparency = 1

    local openTween = TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
        Size = UDim2.new(0, 146, 0, 44),
        BackgroundTransparency = 0.2
    })
    openTween:Play()

    openTween.Completed:Connect(function()
        clickSound:Play()
        TweenService:Create(Arrow, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        TweenService:Create(InputBox, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        TweenService:Create(VersionLabel, TweenInfo.new(0.3), {TextTransparency = 0.6}):Play()
    end)

    -- Enhanced Help GUI with animations
    local function createHelpWindow()
    -- Create main frame with initial transparency
    local helpFrame = Instance.new("Frame")
    helpFrame.Name = "HelpFrame"
    helpFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    helpFrame.BackgroundTransparency = 1
    helpFrame.BorderSizePixel = 0
    helpFrame.Size = UDim2.new(0, 300, 0, 400)
    helpFrame.Position = UDim2.new(0.5, -150, 0.5, -200)
    helpFrame.Parent = ScreenGui
    
    local helpCorner = Instance.new("UICorner")
    helpCorner.CornerRadius = UDim.new(0, 12)
    helpCorner.Parent = helpFrame
    
    -- Title bar with fade-in effect
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    titleBar.BackgroundTransparency = 1
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.Parent = helpFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    local titleText = Instance.new("TextLabel")
    titleText.Name = "TitleText"
    titleText.Text = "Command Help"
    titleText.Font = Enum.Font.Arcade
    titleText.TextSize = 18
    titleText.TextColor3 = Color3.fromRGB(0, 255, 0)
    titleText.TextTransparency = 1
    titleText.BackgroundTransparency = 1
    titleText.Size = UDim2.new(1, -40, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Close button with hover effect
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Text = "X"
    closeButton.Font = Enum.Font.Arcade
    closeButton.TextSize = 18
    closeButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.TextTransparency = 1
    closeButton.BackgroundTransparency = 1
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.Parent = titleBar
    
    closeButton.MouseButton1Click:Connect(function()
        clickSound:Play()
        -- Close animation
        local closeAnim = TweenService:Create(helpFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        })
        closeAnim:Play()
        closeAnim.Completed:Connect(function()
            helpFrame:Destroy()
        end)
    end)
    
    -- Hover effects for close button
    closeButton.MouseEnter:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {
            TextColor3 = Color3.fromRGB(255, 100, 100)
        }):Play()
    end)
    
    closeButton.MouseLeave:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {
            TextColor3 = Color3.fromRGB(255, 0, 0)
        }):Play()
    end)
    
    -- Scrolling frame for commands
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollFrame"
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.Size = UDim2.new(1, -20, 1, -40)
    scrollFrame.Position = UDim2.new(0, 10, 0, 40)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    scrollFrame.ScrollBarThickness = 5
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 255, 0)
    scrollFrame.ScrollBarImageTransparency = 1
    scrollFrame.Parent = helpFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 10) -- Increased padding between commands
    layout.Parent = scrollFrame
    
    -- Add commands to help window with sequential animations
    local commandFrames = {}
    for _, cmd in ipairs(CommandOrder) do
        local data = Commands[cmd]
        local commandFrame = Instance.new("Frame")
        commandFrame.BackgroundTransparency = 1
        commandFrame.Size = UDim2.new(1, 0, 0, 0) -- Height will be automatic
        commandFrame.AutomaticSize = Enum.AutomaticSize.Y
        commandFrame.Parent = scrollFrame
        
        -- Command name with parameters
        local cmdText = Instance.new("TextLabel")
        cmdText.Name = "CmdText"
        if data.hasValue and data.hasPlayer then
            cmdText.Text = cmd .. " <player> <" .. (data.valueName or "value") .. ">"
        elseif data.hasValue then
            cmdText.Text = cmd .. " <" .. (data.valueName or "value") .. ">"
        elseif data.hasPlayer then
            cmdText.Text = cmd .. " <player>"
        else
            cmdText.Text = cmd
        end
        cmdText.Font = Enum.Font.Arcade
        cmdText.TextSize = 16
        cmdText.TextColor3 = Color3.fromRGB(0, 255, 255)
        cmdText.TextTransparency = 1
        cmdText.BackgroundTransparency = 1
        cmdText.TextXAlignment = Enum.TextXAlignment.Left
        cmdText.AutomaticSize = Enum.AutomaticSize.Y
        cmdText.Size = UDim2.new(1, 0, 0, 0)
        cmdText.Parent = commandFrame
        
        -- Description text (on new line)
        local descText = Instance.new("TextLabel")
        descText.Name = "DescText"
        descText.Text = data.desc
        descText.Font = Enum.Font.Arcade
        descText.TextSize = 14
        descText.TextColor3 = Color3.fromRGB(0, 255, 0)
        descText.TextTransparency = 1
        descText.BackgroundTransparency = 1
        descText.TextXAlignment = Enum.TextXAlignment.Left
        descText.TextWrapped = true -- Allow text to wrap
        descText.AutomaticSize = Enum.AutomaticSize.Y
        descText.Size = UDim2.new(1, 0, 0, 0)
        descText.Position = UDim2.new(0, 0, 0, 20) -- Position below command text
        descText.Parent = commandFrame
        
        table.insert(commandFrames, commandFrame)
    end
    
    -- Window open animation
    helpFrame.BackgroundTransparency = 1
    helpFrame.Size = UDim2.new(0, 10, 0, 10)
    
    local openAnim = TweenService:Create(helpFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        BackgroundTransparency = 0.2,
        Size = UDim2.new(0, 300, 0, 400),
        Position = UDim2.new(0.5, -150, 0.5, -200)
    })
    openAnim:Play()
    
    openAnim.Completed:Connect(function()
        -- Fade in title bar
        TweenService:Create(titleBar, TweenInfo.new(0.3), {
            BackgroundTransparency = 0
        }):Play()
        
        -- Fade in title text
        TweenService:Create(titleText, TweenInfo.new(0.3), {
            TextTransparency = 0
        }):Play()
        
        -- Fade in close button
        TweenService:Create(closeButton, TweenInfo.new(0.3), {
            TextTransparency = 0
        }):Play()
        
        -- Fade in scrollbar
        TweenService:Create(scrollFrame, TweenInfo.new(0.3), {
            ScrollBarImageTransparency = 0.5
        }):Play()
        
        -- Sequential fade in for command entries
        for i, frame in ipairs(commandFrames) do
            task.spawn(function()
                task.wait(i * 0.05)
                -- Fade in command text
                TweenService:Create(frame:FindFirstChild("CmdText"), TweenInfo.new(0.3), {
                    TextTransparency = 0
                }):Play()
                
                -- Fade in description text
                TweenService:Create(frame:FindFirstChild("DescText"), TweenInfo.new(0.3), {
                    TextTransparency = 0
                }):Play()
                
                -- Add subtle hover effect for each command
                frame.MouseEnter:Connect(function()
                    TweenService:Create(frame:FindFirstChild("CmdText"), TweenInfo.new(0.2), {
                        TextColor3 = Color3.fromRGB(0, 255, 255),
                        TextSize = 17
                    }):Play()
                end)
                
                frame.MouseLeave:Connect(function()
                    TweenService:Create(frame:FindFirstChild("CmdText"), TweenInfo.new(0.2), {
                        TextColor3 = Color3.fromRGB(0, 255, 200),
                        TextSize = 16
                    }):Play()
                end)
            end)
        end
    end)
    
    -- Make window draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = helpFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            helpFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                          startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    return helpFrame
end


    -- Command handler
    InputBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            clickSound:Play()
            
            -- Arrow flicker animation when Enter is pressed
            local flickerTween1 = TweenService:Create(Arrow, TweenInfo.new(0.1), {
                TextTransparency = 0.8
            })
            local flickerTween2 = TweenService:Create(Arrow, TweenInfo.new(0.1), {
                TextTransparency = 0
            })
            
            flickerTween1:Play()
            flickerTween1.Completed:Connect(function()
                flickerTween2:Play()
            end)
            
            local fullCommand = InputBox.Text
            InputBox.Text = ""
            
            -- Split command and arguments
            local parts = {}
            for part in string.gmatch(fullCommand, "%S+") do
                table.insert(parts, part:lower())
            end
            
            if #parts == 0 then return end
            
            local commandText = parts[1]
            local command = Commands[commandText]
            
            if command then
                -- Check if command expects inputs
                if command.hasValue or command.hasPlayer then
                    local playerName, value
                    local currentIndex = 2
                    
                    -- First check for player name if command expects it
                    if command.hasPlayer and #parts >= currentIndex then
                        playerName = parts[currentIndex]
                        currentIndex = currentIndex + 1
                    end
                    
                    -- Then check for value if command expects it
                    if command.hasValue and #parts >= currentIndex then
                        value = table.concat(parts, " ", currentIndex)
                    elseif command.hasValue then
                        -- Missing value
                        local errorNotification = Instance.new("TextLabel")
                        errorNotification.Name = "Notification"
                        errorNotification.Text = string.format("Missing value for %s. Usage: %s%s%s", 
                            commandText, 
                            commandText,
                            command.hasPlayer and " <player>" or "",
                            command.hasValue and " <"..(command.valueName or "value")..">" or "")
                        errorNotification.Font = Enum.Font.Arcade
                        errorNotification.TextSize = 15
                        errorNotification.TextColor3 = Color3.fromRGB(255, 0, 0)
                        errorNotification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        errorNotification.BackgroundTransparency = 0.1
                        errorNotification.Size = UDim2.new(0, 300, 0, 40)
                        errorNotification.Position = UDim2.new(0, 20, 0, 69)
                        errorNotification.ZIndex = 10
                        errorNotification.Parent = ScreenGui
                        
                        local corner = Instance.new("UICorner")
                        corner.CornerRadius = UDim.new(0, 15)
                        corner.Parent = errorNotification
                        
                        errorSound:Play()
                        
                        -- Fade in
                        errorNotification.BackgroundTransparency = 1
                        errorNotification.TextTransparency = 1
                        local fadeIn = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                            BackgroundTransparency = 0.5,
                            TextTransparency = 0
                        })
                        fadeIn:Play()
                        
                        -- Fade out after delay
                        task.delay(3, function()
                            local fadeOut = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                                TextTransparency = 1,
                                BackgroundTransparency = 1
                            })
                            fadeOut:Play()
                            fadeOut.Completed:Connect(function()
                                errorNotification:Destroy()
                            end)
                        end)
                        return
                    end
                    
                    -- Execute command with inputs
                    local success, message
                    if command.hasPlayer and command.hasValue then
                        success, message = pcall(function() return command.exec(playerName, value) end)
                    elseif command.hasPlayer then
                        success, message = pcall(function() return command.exec(playerName) end)
                    elseif command.hasValue then
                        success, message = pcall(function() return command.exec(value) end)
                    end
                    
                    if success then
                        if commandText ~= "help" then
                            -- Show success notification
                            local notification = Instance.new("TextLabel")
                            notification.Name = "Notification"
                            notification.Text = message
                            notification.Font = Enum.Font.Arcade
                            notification.TextSize = 15
                            notification.TextColor3 = Color3.fromRGB(0, 255, 0)
                            notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                            notification.BackgroundTransparency = 0.1
                            notification.Size = UDim2.new(0, 200, 0, 40)
                            notification.Position = UDim2.new(0, 20, 0, 69)
                            notification.ZIndex = 10
                            notification.Parent = ScreenGui
                            
                            local corner = Instance.new("UICorner")
                            corner.CornerRadius = UDim.new(0, 15)
                            corner.Parent = notification
                            
                            successSound:Play()
                            
                            -- Type out the text character by character
                            local fullText = message
                            notification.Text = ""
                            
                            local charIndex = 0
                            local connection
                            connection = RunService.Heartbeat:Connect(function()
                                if charIndex < #fullText then
                                    charIndex = charIndex + 1
                                    notification.Text = string.sub(fullText, 1, charIndex)
                                    if math.random() > 0.7 then
                                        clickSound:Play()
                                    end
                                else
                                    connection:Disconnect()
                                end
                            end)
                            
                            -- Fade in background
                            notification.BackgroundTransparency = 1
                            local bgFadeIn = TweenService:Create(notification, TweenInfo.new(0.3), {
                                BackgroundTransparency = 0.5
                            })
                            bgFadeIn:Play()
                            
                            -- Fade out after delay
                            task.delay(3, function()
                                local fadeOut = TweenService:Create(notification, TweenInfo.new(0.3), {
                                    TextTransparency = 1,
                                    BackgroundTransparency = 1
                                })
                                fadeOut:Play()
                                fadeOut.Completed:Connect(function()
                                    notification:Destroy()
                                end)
                            end)
                            
                            -- On PC, hide the GUI after command execution
                            if not isMobile() then
                                local closeTween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {
                                    Size = UDim2.new(0, 0, 0, 44),
                                    BackgroundTransparency = 1
                                })
                                closeTween:Play()
                                closeTween.Completed:Connect(function()
                                    ScreenGui.Enabled = false
                                end)
                            end
                        end
                    else
                        -- Show error notification
                        local errorNotification = Instance.new("TextLabel")
                        errorNotification.Name = "Notification"
                        errorNotification.Text = "Error: " .. message
                        errorNotification.Font = Enum.Font.Arcade
                        errorNotification.TextSize = 15
                        errorNotification.TextColor3 = Color3.fromRGB(255, 0, 0)
                        errorNotification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        errorNotification.BackgroundTransparency = 0.1
                        errorNotification.Size = UDim2.new(0, 300, 0, 40)
                        errorNotification.Position = UDim2.new(0, 20, 0, 69)
                        errorNotification.ZIndex = 10
                        errorNotification.Parent = ScreenGui
                        
                        local corner = Instance.new("UICorner")
                        corner.CornerRadius = UDim.new(0, 15)
                        corner.Parent = errorNotification
                        
                        errorSound:Play()
                        
                        -- Fade in
                        errorNotification.BackgroundTransparency = 1
                        errorNotification.TextTransparency = 1
                        local fadeIn = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                            BackgroundTransparency = 0.5,
                            TextTransparency = 0
                        })
                        fadeIn:Play()
                        
                        -- Fade out after delay
                        task.delay(3, function()
                            local fadeOut = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                                TextTransparency = 1,
                                BackgroundTransparency = 1
                            })
                            fadeOut:Play()
                            fadeOut.Completed:Connect(function()
                                errorNotification:Destroy()
                            end)
                        end)
                    end
                else
                    -- Handle regular command without inputs
                    local success, message = pcall(command.exec)
                    if success then
                        if commandText == "help" then
                            createHelpWindow()
                        else
                            -- Show success notification
                            local notification = Instance.new("TextLabel")
                            notification.Name = "Notification"
                            notification.Text = message
                            notification.Font = Enum.Font.Arcade
                            notification.TextSize = 15
                            notification.TextColor3 = Color3.fromRGB(0, 255, 0)
                            notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                            notification.BackgroundTransparency = 0.1
                            notification.Size = UDim2.new(0, 200, 0, 40)
                            notification.Position = UDim2.new(0, 20, 0, 69)
                            notification.ZIndex = 10
                            notification.Parent = ScreenGui
                            
                            local corner = Instance.new("UICorner")
                            corner.CornerRadius = UDim.new(0, 15)
                            corner.Parent = notification
                            
                            successSound:Play()
                            
                            -- Type out the text character by character
                            local fullText = message
                            notification.Text = ""
                            
                            local charIndex = 0
                            local connection
                            connection = RunService.Heartbeat:Connect(function()
                                if charIndex < #fullText then
                                    charIndex = charIndex + 1
                                    notification.Text = string.sub(fullText, 1, charIndex)
                                    if math.random() > 0.7 then
                                        clickSound:Play()
                                    end
                                else
                                    connection:Disconnect()
                                end
                            end)
                            
                            -- Fade in background
                            notification.BackgroundTransparency = 1
                            local bgFadeIn = TweenService:Create(notification, TweenInfo.new(0.3), {
                                BackgroundTransparency = 0.5
                            })
                            bgFadeIn:Play()
                            
                            -- Fade out after delay
                            task.delay(3, function()
                                local fadeOut = TweenService:Create(notification, TweenInfo.new(0.3), {
                                    TextTransparency = 1,
                                    BackgroundTransparency = 1
                                })
                                fadeOut:Play()
                                fadeOut.Completed:Connect(function()
                                    notification:Destroy()
                                end)
                            end)
                            
                            -- On PC, hide the GUI after command execution
                            if not isMobile() then
                                local closeTween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {
                                    Size = UDim2.new(0, 0, 0, 44),
                                    BackgroundTransparency = 1
                                })
                                closeTween:Play()
                                closeTween.Completed:Connect(function()
                                    ScreenGui.Enabled = false
                                end)
                            end
                        end
                    else
                        -- Show error notification
                        local errorNotification = Instance.new("TextLabel")
                        errorNotification.Name = "Notification"
                        errorNotification.Text = "Error: " .. message
                        errorNotification.Font = Enum.Font.Arcade
                        errorNotification.TextSize = 15
                        errorNotification.TextColor3 = Color3.fromRGB(255, 0, 0)
                        errorNotification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                        errorNotification.BackgroundTransparency = 0.1
                        errorNotification.Size = UDim2.new(0, 300, 0, 40)
                        errorNotification.Position = UDim2.new(0, 20, 0, 69)
                        errorNotification.ZIndex = 10
                        errorNotification.Parent = ScreenGui
                        
                        local corner = Instance.new("UICorner")
                        corner.CornerRadius = UDim.new(0, 15)
                        corner.Parent = errorNotification
                        
                        errorSound:Play()
                        
                        -- Fade in
                        errorNotification.BackgroundTransparency = 1
                        errorNotification.TextTransparency = 1
                        local fadeIn = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                            BackgroundTransparency = 0.5,
                            TextTransparency = 0
                        })
                        fadeIn:Play()
                        
                        -- Fade out after delay
                        task.delay(3, function()
                            local fadeOut = TweenService:Create(errorNotification, TweenInfo.new(0.3), {
                                TextTransparency = 1,
                                BackgroundTransparency = 1
                            })
                            fadeOut:Play()
                            fadeOut.Completed:Connect(function()
                                errorNotification:Destroy()
                            end)
                        end)
                    end
                end
            else
                -- Unknown command
                local unknownNotification = Instance.new("TextLabel")
                unknownNotification.Name = "Notification"
                unknownNotification.Text = "Unknown command: " .. commandText
                unknownNotification.Font = Enum.Font.Arcade
                unknownNotification.TextSize = 15
                unknownNotification.TextColor3 = Color3.fromRGB(255, 0, 0)
                unknownNotification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                unknownNotification.BackgroundTransparency = 0.1
                unknownNotification.Size = UDim2.new(0, 200, 0, 40)
                unknownNotification.Position = UDim2.new(0, 20, 0, 69)
                unknownNotification.ZIndex = 10
                unknownNotification.Parent = ScreenGui
                
                local corner = Instance.new("UICorner")
                corner.CornerRadius = UDim.new(0, 15)
                corner.Parent = unknownNotification
                
                errorSound:Play()
                
                -- Fade in
                unknownNotification.BackgroundTransparency = 1
                unknownNotification.TextTransparency = 1
                local fadeIn = TweenService:Create(unknownNotification, TweenInfo.new(0.3), {
                    BackgroundTransparency = 0.5,
                    TextTransparency = 0
                })
                fadeIn:Play()
                
                -- Fade out after delay
                task.delay(3, function()
                    local fadeOut = TweenService:Create(unknownNotification, TweenInfo.new(0.3), {
                        TextTransparency = 1,
                        BackgroundTransparency = 1
                    })
                    fadeOut:Play()
                    fadeOut.Completed:Connect(function()
                        unknownNotification:Destroy()
                    end)
                end)
            end
        end
    end)

    -- Toggle GUI visibility with RightShift (with animation) - only on PC
    if not isMobile() then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if input.KeyCode == Enum.KeyCode.RightShift and not gameProcessed then
                clickSound:Play()
                if ScreenGui.Enabled then
                    -- Close animation
                    local closeTween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {
                        Size = UDim2.new(0, 0, 0, 44),
                        BackgroundTransparency = 1
                    })
                    closeTween:Play()
                    closeTween.Completed:Connect(function()
                        ScreenGui.Enabled = false
                    end)
                else
                    -- Open animation
                    ScreenGui.Enabled = true
                    MainFrame.Size = UDim2.new(0, 0, 0, 44)
                    local openTween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {
                        Size = UDim2.new(0, 146, 0, 44),
                        BackgroundTransparency = 0.2
                    })
                    openTween:Play()
                    
                    -- Focus the input box
                    task.wait(0.3)
                    InputBox:CaptureFocus()
                end
            end
        end)
    end

    -- Initial notification with delay
    task.delay(1.5, function()
        local notification = Instance.new("TextLabel")
        notification.Name = "Notification"
        notification.Text = "Type 'help' for commands"
        notification.Font = Enum.Font.Arcade
        notification.TextSize = 15
        notification.TextColor3 = Color3.fromRGB(0, 255, 255)
        notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        notification.BackgroundTransparency = 0.1
        notification.Size = UDim2.new(0, 200, 0, 40)
        notification.Position = UDim2.new(0, 20, 0, 69)
        notification.ZIndex = 10
        notification.Parent = ScreenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 15)
        corner.Parent = notification
        
        clickSound:Play()
        
        -- Fade in
        notification.BackgroundTransparency = 1
        notification.TextTransparency = 1
        local fadeIn = TweenService:Create(notification, TweenInfo.new(0.3), {
            BackgroundTransparency = 0.5,
            TextTransparency = 0
        })
        fadeIn:Play()
        
        -- Fade out after delay
        task.delay(3, function()
            local fadeOut = TweenService:Create(notification, TweenInfo.new(0.3), {
                TextTransparency = 1,
                BackgroundTransparency = 1
            })
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end)
end

-- Initialize the GUI
initializeGUI()

-- Handle character respawns
localPlayer.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    
    -- Make sure the GUI is properly parented after respawn
    if not ScreenGui.Parent then
        ScreenGui.Parent = localPlayer:WaitForChild("PlayerGui")
    end
    
    -- Reinitialize the GUI to ensure all connections are fresh
    initializeGUI()
end)

-- Initial parent assignment
ScreenGui.Parent = localPlayer:WaitForChild("PlayerGui")
